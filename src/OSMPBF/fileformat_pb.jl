# Autogenerated using ProtoBuf.jl v1.2.0 on 2025-10-30T19:25:34.563
# original file: /home/jrklasen/dev/moviro/OpenStreetMapIO.jl/generate/proto/fileformat.proto (proto2 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export Blob, BlobHeader


struct Blob
    raw_size::Int32
    data::Union{Nothing,OneOf{Vector{UInt8}}}
end
PB.oneof_field_types(::Type{Blob}) = (;
    data = (;raw=Vector{UInt8}, zlib_data=Vector{UInt8}, lzma_data=Vector{UInt8}, OBSOLETE_bzip2_data=Vector{UInt8}, lz4_data=Vector{UInt8}, zstd_data=Vector{UInt8}),
)
PB.default_values(::Type{Blob}) = (;raw_size = zero(Int32), raw = UInt8[], zlib_data = UInt8[], lzma_data = UInt8[], OBSOLETE_bzip2_data = UInt8[], lz4_data = UInt8[], zstd_data = UInt8[])
PB.field_numbers(::Type{Blob}) = (;raw_size = 2, raw = 1, zlib_data = 3, lzma_data = 4, OBSOLETE_bzip2_data = 5, lz4_data = 6, zstd_data = 7)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:Blob})
    raw_size = zero(Int32)
    data = nothing
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 2
            raw_size = PB.decode(d, Int32)
        elseif field_number == 1
            data = OneOf(:raw, PB.decode(d, Vector{UInt8}))
        elseif field_number == 3
            data = OneOf(:zlib_data, PB.decode(d, Vector{UInt8}))
        elseif field_number == 4
            data = OneOf(:lzma_data, PB.decode(d, Vector{UInt8}))
        elseif field_number == 5
            data = OneOf(:OBSOLETE_bzip2_data, PB.decode(d, Vector{UInt8}))
        elseif field_number == 6
            data = OneOf(:lz4_data, PB.decode(d, Vector{UInt8}))
        elseif field_number == 7
            data = OneOf(:zstd_data, PB.decode(d, Vector{UInt8}))
        else
            Base.skip(d, wire_type)
        end
    end
    return Blob(raw_size, data)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::Blob)
    initpos = position(e.io)
    x.raw_size != zero(Int32) && PB.encode(e, 2, x.raw_size)
    if isnothing(x.data);
    elseif x.data.name === :raw
        PB.encode(e, 1, x.data[]::Vector{UInt8})
    elseif x.data.name === :zlib_data
        PB.encode(e, 3, x.data[]::Vector{UInt8})
    elseif x.data.name === :lzma_data
        PB.encode(e, 4, x.data[]::Vector{UInt8})
    elseif x.data.name === :OBSOLETE_bzip2_data
        PB.encode(e, 5, x.data[]::Vector{UInt8})
    elseif x.data.name === :lz4_data
        PB.encode(e, 6, x.data[]::Vector{UInt8})
    elseif x.data.name === :zstd_data
        PB.encode(e, 7, x.data[]::Vector{UInt8})
    end
    return position(e.io) - initpos
end
function PB._encoded_size(x::Blob)
    encoded_size = 0
    x.raw_size != zero(Int32) && (encoded_size += PB._encoded_size(x.raw_size, 2))
    if isnothing(x.data);
    elseif x.data.name === :raw
        encoded_size += PB._encoded_size(x.data[]::Vector{UInt8}, 1)
    elseif x.data.name === :zlib_data
        encoded_size += PB._encoded_size(x.data[]::Vector{UInt8}, 3)
    elseif x.data.name === :lzma_data
        encoded_size += PB._encoded_size(x.data[]::Vector{UInt8}, 4)
    elseif x.data.name === :OBSOLETE_bzip2_data
        encoded_size += PB._encoded_size(x.data[]::Vector{UInt8}, 5)
    elseif x.data.name === :lz4_data
        encoded_size += PB._encoded_size(x.data[]::Vector{UInt8}, 6)
    elseif x.data.name === :zstd_data
        encoded_size += PB._encoded_size(x.data[]::Vector{UInt8}, 7)
    end
    return encoded_size
end

struct BlobHeader
    var"#type"::String
    indexdata::Vector{UInt8}
    datasize::Int32
end
PB.default_values(::Type{BlobHeader}) = (;var"#type" = "", indexdata = UInt8[], datasize = zero(Int32))
PB.field_numbers(::Type{BlobHeader}) = (;var"#type" = 1, indexdata = 2, datasize = 3)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:BlobHeader})
    var"#type" = ""
    indexdata = UInt8[]
    datasize = zero(Int32)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            var"#type" = PB.decode(d, String)
        elseif field_number == 2
            indexdata = PB.decode(d, Vector{UInt8})
        elseif field_number == 3
            datasize = PB.decode(d, Int32)
        else
            Base.skip(d, wire_type)
        end
    end
    return BlobHeader(var"#type", indexdata, datasize)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::BlobHeader)
    initpos = position(e.io)
    PB.encode(e, 1, x.var"#type")
    !isempty(x.indexdata) && PB.encode(e, 2, x.indexdata)
    PB.encode(e, 3, x.datasize)
    return position(e.io) - initpos
end
function PB._encoded_size(x::BlobHeader)
    encoded_size = 0
    encoded_size += PB._encoded_size(x.var"#type", 1)
    !isempty(x.indexdata) && (encoded_size += PB._encoded_size(x.indexdata, 2))
    encoded_size += PB._encoded_size(x.datasize, 3)
    return encoded_size
end
